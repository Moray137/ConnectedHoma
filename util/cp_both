#!/usr/bin/python3

# Copyright (c) 2024 Homa Developers
# SPDX-License-Identifier: BSD-1-Clause

# This cperf benchmark runs both TCP and Homa on each client and server
# node in order to measure interference between the protocols.
# Type "cp_both --help" for documentation.

from cperf import *

for option in ['client_max', 'client_ports', 'port_threads', 'server_ports',
        'tcp_client_ports', 'tcp_server_ports']:
    default_defaults[option] = (default_defaults[option]+1)/2
parser = get_parser(description=
        'Measures slowdown when TCP and Homa are competing for resources '
        'on the same nodes.',
        usage='%(prog)s [options]', defaults={'homa_gbps': 0})
parser.add_argument('--homa-gbps', type=float, dest='homa_gbps',
        metavar='B', default=None,
        help='Configure Homa to generate B Gbps of total outgoing bandwidth '
        'on each node (clients and servers combined); the remainder of '
        '--gbps will be generated by TCP (default: split --gbps between '
        'Homa and TCP)')
default_defaults['client_max']
options = parser.parse_args()
init(options)

# First, run the experiment
if not options.plot_only:
    homa_options = copy.deepcopy(options)
    homa_options.name = "homa_" + options.workload
    homa_options.protocol = "homa"

    tcp_options = copy.deepcopy(options)
    tcp_options.name = "tcp_" + options.workload
    tcp_options.protocol = "tcp"

    if options.homa_gbps == None:
        options.homa_gbps = options.gbps/2.0
    tcp_options.gbps = (options.gbps - options.homa_gbps)/2
    if tcp_options.gbps < 0:
        tcp_options.gbps = 0
    homa_options.gbps = options.gbps/2 - tcp_options.gbps
    try:
        run_experiments(homa_options, tcp_options)
    except Exception as e:
        log(traceback.format_exc())
    log("Stopping nodes")
    stop_nodes()
    scan_logs()

# Generate plots and reports
homa_exp = "homa_" + options.workload
scan_metrics(homa_exp)
tcp_exp = "tcp_" + options.workload
scan_metrics(tcp_exp)

# Generate slowdown plot.
log("Generating slowdown plot for %s" % (options.workload))
title = "TCP (%.1f Gbps) and Homa (%.1f Gbps) together, %s %d nodes" % (
        options.gbps - options.homa_gbps, options.homa_gbps,
        options.workload.capitalize(), options.num_nodes)
ax = start_slowdown_plot(title, 1000, homa_exp)
plot_slowdown(ax, tcp_exp, "p99", "TCP P99", color=tcp_color)
plot_slowdown(ax, tcp_exp, "p50", "TCP P50", color=tcp_color2)
plot_slowdown(ax, homa_exp, "p99", "Homa P99", color=homa_color)
plot_slowdown(ax, homa_exp, "p50", "Homa P50", color=homa_color2)
ax.legend(loc="upper right", prop={'size': 9})
plt.tight_layout()
plt.savefig("%s/reports/both_%s.pdf" % (options.log_dir, options.workload))

# Generate CDF of small-message RTTs.
log("Generating short message CDF for %s" % (options.workload))
homa_x, homa_y = get_short_cdf(homa_exp)
tcp_x, tcp_y = get_short_cdf(tcp_exp)
start_cdf_plot(title, 10, 0.99e05, 1e-05, "RTT (usecs)",
        "Cumulative Fraction Short Messages")
plt.plot(tcp_x, tcp_y, label="TCP", color=tcp_color)
plt.plot(homa_x, homa_y, label="Homa", color=homa_color)
plt.legend(loc="upper right", prop={'size': 9})
plt.savefig("%s/reports/short_cdf_%s.pdf" % (options.log_dir,
        options.workload))
